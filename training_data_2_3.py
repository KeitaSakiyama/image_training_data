# -*- coding: utf-8 -*-
"""teaching_data_2_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m4YxvlEHSUjisYmW8Dq63TuMDiP7LZQk
"""

#Level2,3生成用のコード

from PIL import Image
import random
import os
import numpy as np
import math

# 1種類の画像のパスを設定
image_path = 'new_items/beaker.png'

# 画像を読み込む
image = Image.open(image_path).convert("RGBA")

# 背景画像のサイズを設定（例として画像のサイズを使用）
background_image_size = (1360, 1020)

label = []

# ランダムに拡大縮小し、回転させて重ね合わせる関数
def overlay_single_image_randomly(image, background_image_size, num_overlays):
    base_image = Image.new('L', background_image_size, (255))
    placed_positions = []
    count_fail = 0

    for _ in range(num_overlays):
        while True:
            # ランダムに拡大縮小 (0.5と1はハイパーパラメータ)
            scale_factor = random.uniform(0.5, 1)
            new_size = (int(image.width * scale_factor), int(image.height * scale_factor))
            resized_image = image.resize(new_size, Image.LANCZOS)

            # ランダムに回転
            rotation_angle = random.randint(0, 360)
            rotated_image = resized_image.rotate(rotation_angle, expand=True)

            #ランダムに配置
            x_offset = random.randint(0, background_image_size[0] - rotated_image.width)
            y_offset = random.randint(0, background_image_size[1] - rotated_image.height)
            x_center = x_offset + rotated_image.width // 2
            y_center = y_offset + rotated_image.height // 2

            #位置が正確か確認する時のフラグを宣言
            is_valid_position = True

            #今の画像とこれまでに出た画像全てについて距離が十分適切になるまで繰り返す
            #一つでも不適切ならFalse、そうでなければTrueのまま
            for (placed_x, placed_y, placed_w, placed_h) in placed_positions:
                if not (x_center + rotated_image.width < placed_x or
                    x_center > placed_x + placed_w or
                    y_center + rotated_image.height < placed_y or
                    y_center > placed_y + placed_h):
                    is_valid_position = False
                    count_fail += 1
                    break
                
            if is_valid_position:
                placed_positions.append((x_center, y_center, rotated_image.width, rotated_image.height))
                count_fail =0
                break

        norm = np.linalg.norm(new_size)
        label.append((x_center/background_image_size[0], y_center/background_image_size[1], rotated_image.width/background_image_size[0], rotated_image.height/background_image_size[1]))
        # 重ね合わせ
        base_image.paste(rotated_image, (x_offset, y_offset), rotated_image)

    return base_image

# 生成する画像の枚数
num_generated_images = 10

# 出力ディレクトリを設定　→　generated_images2_3
output_directory = 'image_detection/generated_images2_3'
os.makedirs(output_directory, exist_ok=True)

# 複数枚のランダムに重ね合わせた画像を生成
for i in range(num_generated_images):
    # 1枚の画像に重ね合わせる数
    num_overlays_per_image = random.randint(2,6)
    combined_image = overlay_single_image_randomly(image, background_image_size, num_overlays_per_image)
    output_image_path = os.path.join(output_directory, f'beaker_{i+1}.png')
    combined_image.save(output_image_path, quality=95)
    print(f"Combined image saved to: {output_image_path}")

    params_file_path = os.path.join(output_directory, f'beaker_{i+1}.txt')
    with open(params_file_path, 'w') as f:
      for i in range(num_overlays_per_image):
         f.write(f"{0} {label[i][0]} {label[i][1]} {label[i][2]} {label[i][3]}\n")
    print(f"Overlay parameters saved to: {params_file_path}")
    label = []